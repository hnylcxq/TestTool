void ckp_c::dump_spl_win_vld(const tag_base* data)
{
    auto d = reinterpret_cast<const spl_win_vld_tag*>(data);
    m_buff[CK_ID::SPL_WIN_VLD].pushfield(d->spl_unpack_dat, 38);
    m_buff[CK_ID::SPL_WIN_VLD].pushstr('\n');
}


void ckp_c::dump_sups_vwin_vld(const tag_base* data)
{
    auto d = reinterpret_cast<const sups_vwin_vld_tag*>(data);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushfield(d->sups_vpxl_nxt, 38);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushfield(d->sups_vpxl_cur, 38);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushfield(d->sups_vacc, 21);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushfield(d->sups_vfct, 8);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushfield(d->sups_vcoef1, 9);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushfield(d->sups_vcoef2, 9);
    m_buff[CK_ID::SUPS_VWIN_VLD].pushstr('\n');
}


void ckp_c::dump_sups_hwin_vld(const tag_base* data)
{
    auto d = reinterpret_cast<const sups_hwin_vld_tag*>(data);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_hpxl, 40);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_hacc, 21);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_hfct, 8);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_hcoef1, 9);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_hcoef2, 9);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_out_dat, 30);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_out_alpha, 8);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_color_key, 1);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushfield(d->sups_alpha_key, 1);
    m_buff[CK_ID::SUPS_HWIN_VLD].pushstr('\n');
}


void ckp_c::dump_sups_config_done(const tag_base* data)
{
    auto d = reinterpret_cast<const sups_config_done_tag*>(data);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_src_w, 14);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_src_h, 13);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_dst_w, 14);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_dst_h, 13);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_hacc, 21);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_vacc, 21);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_htap, 1);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_vtap, 1);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_vdup, 1);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_alpha_ups, 1);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_keyl, 30);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->spl_keyh, 30);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushfield(d->key_mode, 3);
    m_buff[CK_ID::SUPS_CONFIG_DONE].pushstr('\n');
}


void ckp_c::dump_cur_vld(const tag_base* data)
{
    auto d = reinterpret_cast<const cur_vld_tag*>(data);
    m_buff[CK_ID::CUR_VLD].pushfield(d->cur_dat, 32);
    m_buff[CK_ID::CUR_VLD].pushstr('\n');
}


void ckp_c::dump_cur_csc_vld(const tag_base* data)
{
    auto d = reinterpret_cast<const cur_csc_vld_tag*>(data);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->csc_in_dat, 32);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->ry_sum, 18);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->gu_sum, 18);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->bv_sum, 18);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->ry_bright, 18);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->gu_bright, 18);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->bv_bright, 18);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->cur_ycbcr, 1);
    m_buff[CK_ID::CUR_CSC_VLD].pushfield(d->csc_out_dat, 32);
    m_buff[CK_ID::CUR_CSC_VLD].pushstr('\n');
}


void ckp_c::dump_scsc_in_win_vld(const tag_base* data)
{
    auto d = reinterpret_cast<const scsc_in_win_vld_tag*>(data);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_in_pxl, 30);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_r_f1, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_g_f2, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_b_f3, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_r_f4, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_g_f5, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_b_f6, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_r_f7, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_g_f8, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_b_f9, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_sum_r, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_sum_g, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_sum_b, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_bright_r, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_bright_g, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_bright_b, 25);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushfield(d->scsc_out_pxl, 30);
    m_buff[CK_ID::SCSC_IN_WIN_VLD].pushstr('\n');
}


void ckp_c::dump_scsc_config_done(const tag_base* data)
{
    auto d = reinterpret_cast<const scsc_config_done_tag*>(data);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_in_fmt, 3);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_out_fmt, 3);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_bright, 9);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_program, 1);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef1, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef2, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef3, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef4, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef5, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef6, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef7, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef8, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushfield(d->scsc_coef9, 14);
    m_buff[CK_ID::SCSC_CONFIG_DONE].pushstr('\n');
}


void ckp_c::dump_ovl_in_de(const tag_base* data)
{
    auto d = reinterpret_cast<const ovl_in_de_tag*>(data);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl0_ovl_pxl, 30);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl0_ovl_window, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl0_ovl_alpha, 8);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl0_ovl_color_key, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl0_ovl_alpha_key, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl0_ovl_ycbcr, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl0_pla_fct, 4);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl0_plb_fct, 4);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl0_alpha, 9);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl0_ycbcr, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl0_dout, 30);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_a_alpha, 8);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_a_window, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_a_alpha_key, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_a_color_key, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl1_ovl_pxl, 30);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl1_ovl_window, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl1_ovl_alpha, 8);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl1_ovl_color_key, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl1_ovl_alpha_key, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->spl1_ovl_ycbcr, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_pla_fct, 4);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_plb_fct, 4);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_alpha, 9);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_ycbcr, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl1_dout, 30);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->cur_ovl_type, 2);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->cur_ovl_window, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->cur_ovl_data, 32);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->cur_ovl_ycbcr, 1);
    m_buff[CK_ID::OVL_IN_DE].pushfield(d->ovl_pus_pxl, 30);
    m_buff[CK_ID::OVL_IN_DE].pushstr('\n');
}


void ckp_c::dump_ovl_config(const tag_base* data)
{
    auto d = reinterpret_cast<const ovl_config_tag*>(data);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_bg_color, 30);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_bg_ycbcr, 1);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_key_mode, 4);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_pla_fct, 4);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_plb_fct, 4);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_alpha_blend_mode, 1);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_inv_alpha, 1);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_plane_alpha, 8);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_alpha_key_sel, 2);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_color_key_sel, 2);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl0_alpha_rang, 1);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_key_mode, 4);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_pla_fct, 4);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_plb_fct, 4);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_alpha_blend_mode, 1);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_inv_alpha, 1);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_plane_alpha, 8);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_alpha_key_sel, 2);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_color_key_sel, 2);
    m_buff[CK_ID::OVL_CONFIG].pushfield(d->reg_ovl1_alpha_rang, 1);
    m_buff[CK_ID::OVL_CONFIG].pushstr('\n');
}


void ckp_c::dump_pus_in_de(const tag_base* data)
{
    auto d = reinterpret_cast<const pus_in_de_tag*>(data);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->ovl_pus_pxl, 30);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->h_acc, 21);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->v_acc, 21);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->hfct_tmp, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->vfct_tmp, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->hfct, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->vfct, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->r_next_v, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->r_current_v, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->g_next_v, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->g_current_v, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->b_next_v, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->b_current_v, 8);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->r_next_h, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->r_current_h, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->g_next_h, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->g_current_h, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->b_next_h, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->b_current_h, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->h_r, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->h_g, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->h_b, 10);
    m_buff[CK_ID::PUS_IN_DE].pushfield(d->pus_lut_pxl, 30);
    m_buff[CK_ID::PUS_IN_DE].pushstr('\n');
}


void ckp_c::dump_pus_config(const tag_base* data)
{
    auto d = reinterpret_cast<const pus_config_tag*>(data);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_en, 1);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_hen, 1);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_ven, 1);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_width_dst, 13);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_height_dst, 12);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_ratio_mode, 1);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_ratio_plus, 1);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_ratio_h, 20);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_ratio_v, 20);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_cos2tap, 1);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->reg_pus_bg_color, 30);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->ratio_h, 20);
    m_buff[CK_ID::PUS_CONFIG].pushfield(d->ratio_v, 20);
    m_buff[CK_ID::PUS_CONFIG].pushstr('\n');
}


void ckp_c::dump_lut_if(const tag_base* data)
{
    auto d = reinterpret_cast<const lut_if_tag*>(data);
    m_buff[CK_ID::LUT_IF].pushfield(d->pus_lut_pxl, 30);
    m_buff[CK_ID::LUT_IF].pushfield(d->lut_csc_pxl, 30);
    m_buff[CK_ID::LUT_IF].pushstr('\n');
}


void ckp_c::dump_lut_config(const tag_base* data)
{
    auto d = reinterpret_cast<const lut_config_tag*>(data);
    m_buff[CK_ID::LUT_CONFIG].pushfield(d->reg_lut_lut_en, 1);
    m_buff[CK_ID::LUT_CONFIG].pushfield(d->reg_lut_intp_on, 1);
    m_buff[CK_ID::LUT_CONFIG].pushfield(d->reg_lut_bitwidth, 2);
    m_buff[CK_ID::LUT_CONFIG].pushstr('\n');
}


void ckp_c::dump_dihter_in_de(const tag_base* data)
{
    auto d = reinterpret_cast<const dihter_in_de_tag*>(data);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_pxl_in, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_pxl_in, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_pxl_in, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->dith_row_r, 2);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->dith_row_g, 2);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->dith_row_b, 2);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->dith_col_r, 2);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->dith_col_g, 2);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->dith_col_b, 2);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_pre_dither, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_add_detc, 9);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_avail_bits_2dither, 4);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_value_2add_fm_pre_dither, 6);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_reg16by16_out, 16);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_reg16by16_out_sel, 4);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_seld_reg16by16_out_bit, 1);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_pre_dither, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_add_detc, 9);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_avail_bits_2dither, 4);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_value_2add_fm_pre_dither, 6);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_reg16by16_out, 16);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_reg16by16_out_sel, 4);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_seld_reg16by16_out_bit, 1);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_pre_dither, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_add_detc, 9);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_avail_bits_2dither, 4);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_value_2add_fm_pre_dither, 6);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_reg16by16_out, 16);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_reg16by16_out_sel, 4);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_seld_reg16by16_out_bit, 1);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->r_dith_out, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->g_dith_out, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushfield(d->b_dith_out, 10);
    m_buff[CK_ID::DIHTER_IN_DE].pushstr('\n');
}


void ckp_c::dump_dither_config(const tag_base* data)
{
    auto d = reinterpret_cast<const dither_config_tag*>(data);
    m_buff[CK_ID::DITHER_CONFIG].pushfield(d->reg_dither_en, 1);
    m_buff[CK_ID::DITHER_CONFIG].pushfield(d->reg_dither_base, 3);
    m_buff[CK_ID::DITHER_CONFIG].pushfield(d->reg_dither_bitsel, 1);
    m_buff[CK_ID::DITHER_CONFIG].pushfield(d->reg_dither_dist_en, 1);
    m_buff[CK_ID::DITHER_CONFIG].pushstr('\n');
}

